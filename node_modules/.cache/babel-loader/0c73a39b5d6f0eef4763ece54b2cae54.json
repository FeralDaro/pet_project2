{"ast":null,"code":"import { authAPI } from \"../api/api\";\nconst SET_USER_DATA = 'SET_USER_DATA';\nlet initialState = {\n  userId: null,\n  email: null,\n  login: null,\n  isAuth: false\n};\n\nconst authReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_USER_DATA:\n      return { ...state,\n        ...action.data,\n        isAuth: true\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const setAuthUserData = (userId, email, login, isAuth) => ({\n  type: SET_USER_DATA,\n  data: {\n    userId,\n    email,\n    login,\n    isAuth\n  }\n});\nexport const getAuthUserData = () => dispatch => {\n  authAPI.me().then(response => {\n    if (response.data.resultCode === 0) {\n      let {\n        id,\n        login,\n        email\n      } = response.data.data;\n      dispatch(setAuthUserData(id, email, login));\n    }\n  });\n};\nexport const login = (email, password, rememberMe) => dispatch => {\n  authAPI.login(email, password, rememberMe).then(response => {\n    if (response.data.resultCode === 0) {\n      dispatch(setAuthUserData());\n    }\n  });\n};\nexport const logout = () => dispatch => {\n  authAPI.logout().then(response => {\n    if (response.data.resultCode === 0) {\n      dispatch(setAuthUserData());\n    }\n  });\n};\nexport default authReducer;","map":{"version":3,"sources":["C:/my_codes/samurai_path/projects/01_first_project/pet_project2/src/redux/auth-reducer.js"],"names":["authAPI","SET_USER_DATA","initialState","userId","email","login","isAuth","authReducer","state","action","type","data","setAuthUserData","getAuthUserData","dispatch","me","then","response","resultCode","id","password","rememberMe","logout"],"mappings":"AAAA,SAAQA,OAAR,QAAsB,YAAtB;AAEA,MAAMC,aAAa,GAAG,eAAtB;AAGA,IAAIC,YAAY,GAAG;AACfC,EAAAA,MAAM,EAAE,IADO;AAEfC,EAAAA,KAAK,EAAE,IAFQ;AAGfC,EAAAA,KAAK,EAAE,IAHQ;AAIfC,EAAAA,MAAM,EAAE;AAJO,CAAnB;;AAOA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGN,YAAT,EAAuBO,MAAvB,KAAkC;AAClD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKT,aAAL;AAEI,aAAO,EACH,GAAGO,KADA;AAEH,WAAGC,MAAM,CAACE,IAFP;AAGHL,QAAAA,MAAM,EAAE;AAHL,OAAP;;AAMJ;AACI,aAAOE,KAAP;AAVR;AAYH,CAbD;;AAgBA,OAAO,MAAMI,eAAe,GAAG,CAACT,MAAD,EAASC,KAAT,EAAgBC,KAAhB,EAAuBC,MAAvB,MAAmC;AAACI,EAAAA,IAAI,EAAET,aAAP;AAC9DU,EAAAA,IAAI,EAAE;AAACR,IAAAA,MAAD;AAASC,IAAAA,KAAT;AAAgBC,IAAAA,KAAhB;AAAuBC,IAAAA;AAAvB;AADwD,CAAnC,CAAxB;AAEP,OAAO,MAAMO,eAAe,GAAG,MAAOC,QAAD,IAAc;AAC/Cd,EAAAA,OAAO,CAACe,EAAR,GACKC,IADL,CACUC,QAAQ,IAAI;AACd,QAAIA,QAAQ,CAACN,IAAT,CAAcO,UAAd,KAA6B,CAAjC,EAAoC;AAChC,UAAI;AAACC,QAAAA,EAAD;AAAKd,QAAAA,KAAL;AAAYD,QAAAA;AAAZ,UAAqBa,QAAQ,CAACN,IAAT,CAAcA,IAAvC;AACAG,MAAAA,QAAQ,CAACF,eAAe,CAACO,EAAD,EAAKf,KAAL,EAAYC,KAAZ,CAAhB,CAAR;AACH;AACJ,GANL;AAOH,CARM;AASP,OAAO,MAAMA,KAAK,GAAG,CAACD,KAAD,EAAQgB,QAAR,EAAkBC,UAAlB,KAAkCP,QAAD,IAAc;AAChEd,EAAAA,OAAO,CAACK,KAAR,CAAcD,KAAd,EAAqBgB,QAArB,EAA+BC,UAA/B,EACKL,IADL,CACUC,QAAQ,IAAI;AACd,QAAIA,QAAQ,CAACN,IAAT,CAAcO,UAAd,KAA6B,CAAjC,EAAoC;AAChCJ,MAAAA,QAAQ,CAACF,eAAe,EAAhB,CAAR;AACH;AACJ,GALL;AAMH,CAPM;AAQP,OAAO,MAAMU,MAAM,GAAG,MAAOR,QAAD,IAAc;AACtCd,EAAAA,OAAO,CAACsB,MAAR,GACKN,IADL,CACUC,QAAQ,IAAI;AACd,QAAIA,QAAQ,CAACN,IAAT,CAAcO,UAAd,KAA6B,CAAjC,EAAoC;AAChCJ,MAAAA,QAAQ,CAACF,eAAe,EAAhB,CAAR;AACH;AACJ,GALL;AAMH,CAPM;AASP,eAAeL,WAAf","sourcesContent":["import {authAPI} from \"../api/api\";\r\n\r\nconst SET_USER_DATA = 'SET_USER_DATA';\r\n\r\n\r\nlet initialState = {\r\n    userId: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false\r\n};\r\n\r\nconst authReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n\r\n            return {\r\n                ...state,\r\n                ...action.data,\r\n                isAuth: true\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nexport const setAuthUserData = (userId, email, login, isAuth) => ({type: SET_USER_DATA,\r\n    data: {userId, email, login, isAuth}  })\r\nexport const getAuthUserData = () => (dispatch) => {\r\n    authAPI.me()\r\n        .then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                let {id, login, email} = response.data.data;\r\n                dispatch(setAuthUserData(id, email, login));\r\n            }\r\n        });\r\n}\r\nexport const login = (email, password, rememberMe) => (dispatch) => {\r\n    authAPI.login(email, password, rememberMe)\r\n        .then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(setAuthUserData());\r\n            }\r\n        });\r\n}\r\nexport const logout = () => (dispatch) => {\r\n    authAPI.logout()\r\n        .then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(setAuthUserData());\r\n            }\r\n        });\r\n}\r\n\r\nexport default authReducer;"]},"metadata":{},"sourceType":"module"}